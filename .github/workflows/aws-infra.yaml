

name: 'AWS Infra Deployment'

env:
 
  TF_VAR_tfstate_bucket: ${{ vars.AWS_TFSTATE_BUCKET }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  TF_VAR_commit_hash: ${{ github.sha }}

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:
    inputs:
      is_destroy:
        description: "Destroy resources?"
        required: false
        default: "false"  # Defaulting to "false" for safety

permissions:
  contents: read

jobs:
  terraform:
    name: 'AWS Infra Deployment'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./aws-tarraform/infra/

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
  
    # - name: Setup GCP
    #   run: echo '${{ secrets.GCP_SERVICE_KEY }}' > gcp.json

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init -backend-config="bucket=${{ vars.TFSTATE_BUCKET }}" 

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    - name: Terraform Plan
      if: ${{ github.event.inputs.is_destroy != 'true' }}
      run: terraform plan -input=false

    - name: Terraform Apply

      if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.is_destroy != 'true' }}
      run: terraform apply -auto-approve -input=false

    - name: Destroy Terraform Resources
      if: ${{ github.event.inputs.is_destroy == 'true' }}
      run: terraform destroy -auto-approve